Do we need to have authentication where users are only allowed to see/modify clients and devices assigned to them?

There would have to be at least one "super user" who can do everything. This is necessary, at the very least, to handle new devices and create new clients.

Each client will need an admin_id column. (Can there ever be more than one admin per client?)

Will devices (and controls) need an admin_id as well? Test.

Simpler solution: allow only the logged-in user (super user) to make changes. Everyone else can only view.

May need to add a column for "received timestamp" to both alert and counter tables. Some printers do not have the correct time. Is it reasonable to expect all printers to be synchronised to a SNTP server? There are plenty of public ones and any printer that's networked should be.

============= DONE =============
Use fetchmail to download email messages from dha@sharpsec.com rather than having the mail server (sharpmail.sharpamericas.com) forward them. Paul thinks this will keep it under IT's radar.

fetchmail options to use:
-k
  keep retrieved messages on the mail server

-p IMAP
  Protocol to use to talk to the mail server
  
--fetchlimit <number>
  For testing only - limits the number of messges fetched from the mail server per connection.
  
-u <username>

---------------------------
.fetchmailrc file

# Specify mail server to poll for new messages
poll sharpmail.sharpamericas.com
  protocol IMAP
  # Deliver new messages from user "dha" to local user "sharpmon" and
  # leave message on the server
  user "dha" with password "W3lcome1" there is "sharpmon" here keep
# Put into daemon mode, polling every 300 seconds (5 min)
# set daemon 300
# Direct error mail to the local postmaster
set no bouncemail
# Keep undeliverable messages on the server
set softbounce
# Use syslog
set syslog

---------------------------
Plan:

- Access DHA inbox with Thunderbirdq
- Delete all "Mail Delivery System" messages
- Mark all messages as read
- Disable redirect rule on DHA inbox
- TO TEST: 
    - run fetchmail manually once DHA has received one new alert
    - see if it shows up in RED db
- start fetchmail on RED server
- make sure fetchmail will automatically start on reboot - use cron instead of daemon

============= DONE ==============
Fix alert_date for records between alert id 67062 (2014-02-13 15:32:44 s/n:8501629700) and alert id 68360 (2014-02-18 18:17:50 s/n:7507223Y00). Need to subtract 5 hrs from them. Need to subtract 5 hours.

============= TODO ==============
Handle different languages

Most likely languages we need to worry about are English and French. Where do we need care? 
- both process_*_email.rb programs.
- wherever we search for, or process alert messages

============= TODO ==============
Do something to predict when toner needs to be added based on past usage. Must have at least two data points (i.e. two "add toner" alerts). Predict using linear regression.

* Can not assume there will always be an "Add toner" alert. Some people *may* change
  toner cartridge before that point. 
* There *should* always be at least one "toner supply is low" alert.

============= TODO ==============
Start tracking bw and colour sheet counts for all alerts except "Load Paper" and "Job log full". Also track maintenance counters available in file "E-mail DIAG Maintenance Counter Data.R09".

- Need new tables: 
  - jam_stats (from file "E-mail DIAG Jam Trouble Data.R05")
    - jam code
    - paper type
    - paper code
    - jam type (doc feeder (DF) or machine body (MB))
    - BELONGS_TO :alerts

  There will be one sheet_count and maint_counter entry for each alert.
  
  - sheet_counts (from file "E-mail DIAG Job Counter Data.R08")
    - skip 232
    - bw (offset 0xe8)
    - color (offset 0xec)
    - BELONGS_TO :alerts
    
  - maint_counters (from file "E-mail DIAG Maintenance Counter Data.R09")
    - all counters are 4 bytes long
    - skip 60
    - maint_counter (total, color at offsets 0x3c, 0x40)
    - drum_print_(b,c,m,y at 0x44, 0x48, 0x4c, 0x50)
    - dev_print_(b,c,m,y at 0x54, 0x58, 0x5c, 0x60)
    - skip 16
    - drum_dist_(b,c,m,y at 0x74, 0x78, 0x7c, 0x80)
    - dev_dist_(b,c,m,y at 0x84, 0x88, 0x8c, 0x90)
    - skip 16
    
    - scan (at 0xa4)
    - spf_counter (at 0xa8)
    - skip 44
    - mft_total (at 0xd8)
    - tray_(1,2,3,4) (at 0xdc, 0xe0, 0xe4, 0xe8)
    - skip 4
    - adu (at 0xf4)
    - ptu_print (at 0xf8)
    - ptu_dist (at 0xfc)
    - ptu_days (at 0x100)
    - stu_print (at 0x104)
    - stu_dist (at 0x108)
    - stu_days (at 0x10c)
    - fuser_print (at 0x110)
    - fuser_days (at 0x114)
    - skip 8
    - toner_motor_(b,c,m,y at 0x11c, 0x120, 0x124, 0x128)
    - toner_rotation_(b,c,m,y at 0x12c, 0x130, 0x134, 0x138)
    - drum_life_used_(b,c,m,y at 0x13c, 0x140, 0x144, 0x148)
    - dev_life_used_(b,c,m,y at 0x14c, 0x150, 0x154, 0x158)
    - BELONGS_TO :alerts

- Modify Alert model
  - HAS_ONE :jam_stat
  - HAS_ONE :sheet_count
  - HAS_ONE :maint_counter
  
* Only works for MFPs that send dealer attachments


----- Things to test
Parse the Jam Trouble file to see how well the history match up with past alerts (JamTroubleDecode.rb) RESULT: GENERALLY GOOD 

----- Implementation
Phase I  *** DEPLOYED ***
- Start recording counters for all alerts, whenever available
- Ignore counters for "Load Paper", and "Job Log" alerts
- For all alerts (other than the two above) we want to capture
  - bw and colour sheet count
  - all maintenance counters
- For "Misfeed" and "Call for Service" we also want the jam code and trouble code, respectively. (The trouble code we already have from the text of the alert.)

  Phase I testing
  - process plain (no attachments) alert
  - process alert with attachments - verify numbers are all correct
  
Phase II - Reprocess available past alerts  *** ON-GOING ***
  - modify process_alert_email.rb so old (existing) alerts are not duplicated
  - NB. Since "Load Paper" alerts older than 1 month are automatically deleted
    make sure old "load paper" alerts are not processed again.
- move a limited number of old message (dha@sharpsec.com) to a temp folder and use fetchmail to grab them and process them
  - fetchmail --all --folder INBOX/temp
  - after each iteration move the messages in the temp folder to an archive folder and delete them from sharpmon's mailbox

Phase III - Figure out how to display the data *** ON-GOING ***
- Only makes sense for device/alert combinations, I think.
- Show difference in page counts (bw and colour) between successive alerts
- Special Report: misfeed frequency (DONE)
  - for each device show how many times a misfeed code has occurred
  - click on jam code to show history of specific jam code for that device, including delta-time and delta-(bw,color)-sheet_count
- Special Report: drum or developer at or above 85% (DONE)
  
Phase IV - Reports *** ON-GOING ***
- Create queries that make use of counters to predict future events
- Toner history for one device. Access as /report/:id/toner_history *** DONE - mostly ***
  - Based on "toner supply is low" alert since we can not count on the users to wait until 
    there's an "add toner" before replacing the toner; but it's more likely they won't
    replace it before a "low" alert.
  - Show date of alerts (not time)
  - Show date interval between successive alerts for the same toner
  - Show appropriate page count difference between alerts for the same toner
- Full Jam History
  * Need to translate jam code to something a service tech or manager can understand.
  * Add control to select between "difference since last displayed alert" and "difference since last alert for this code"
- Show latest maintenance counters
* Maintenance Code History
* Service Code History

============= DONE (but keep adding new reports) ==============
- Clicking on a device (name, model or serial number) from anywhere in the application should take the user to a "What reports are available for this device" screen, one of which would be to edit the device details.